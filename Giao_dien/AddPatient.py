# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'AddPatient.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import json
import os
import base64
import hashlib
import secrets
from datetime import datetime
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad

class Ui_MainWindow(object):
    def __init__(self):
        self.token = None
        self.parent_window = None
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(947, 740)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(20, 50, 291, 491))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(40, 60, 67, 17))
        self.label.setObjectName("label")
        self.tbHoTen = QtWidgets.QLineEdit(self.groupBox)
        self.tbHoTen.setGeometry(QtCore.QRect(120, 60, 113, 25))
        self.tbHoTen.setObjectName("tbHoTen")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(90, 30, 21, 21))
        self.label_2.setObjectName("label_2")
        self.tbID = QtWidgets.QLineEdit(self.groupBox)
        self.tbID.setGeometry(QtCore.QRect(120, 30, 113, 25))
        self.tbID.setObjectName("tbID")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(40, 90, 67, 17))
        self.label_3.setObjectName("label_3")
        self.tbNgaySinh = QtWidgets.QLineEdit(self.groupBox)
        self.tbNgaySinh.setGeometry(QtCore.QRect(120, 90, 113, 25))
        self.tbNgaySinh.setObjectName("tbNgaySinh")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(20, 140, 67, 17))
        self.label_4.setObjectName("label_4")
        self.tbDiaChi = QtWidgets.QTextEdit(self.groupBox)
        self.tbDiaChi.setGeometry(QtCore.QRect(20, 170, 231, 70))
        self.tbDiaChi.setObjectName("tbDiaChi")
        self.tbThongTinLienLac = QtWidgets.QTextEdit(self.groupBox)
        self.tbThongTinLienLac.setGeometry(QtCore.QRect(20, 280, 231, 70))
        self.tbThongTinLienLac.setObjectName("tbThongTinLienLac")
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        self.label_5.setGeometry(QtCore.QRect(20, 250, 151, 17))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.groupBox)
        self.label_6.setGeometry(QtCore.QRect(20, 360, 121, 17))
        self.label_6.setObjectName("label_6")
        self.tbTienSuBenh = QtWidgets.QTextEdit(self.groupBox)
        self.tbTienSuBenh.setGeometry(QtCore.QRect(20, 390, 231, 70))
        self.tbTienSuBenh.setObjectName("tbTienSuBenh")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(329, 49, 271, 491))
        self.groupBox_2.setObjectName("groupBox_2")
        self.tbTuoi = QtWidgets.QLineEdit(self.groupBox_2)
        self.tbTuoi.setGeometry(QtCore.QRect(110, 30, 113, 25))
        self.tbTuoi.setObjectName("tbTuoi")
        self.label_7 = QtWidgets.QLabel(self.groupBox_2)
        self.label_7.setGeometry(QtCore.QRect(60, 30, 41, 21))
        self.label_7.setObjectName("label_7")
        self.tbCanNang = QtWidgets.QLineEdit(self.groupBox_2)
        self.tbCanNang.setGeometry(QtCore.QRect(110, 60, 113, 25))
        self.tbCanNang.setObjectName("tbCanNang")
        self.label_8 = QtWidgets.QLabel(self.groupBox_2)
        self.label_8.setGeometry(QtCore.QRect(30, 90, 67, 17))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.groupBox_2)
        self.label_9.setGeometry(QtCore.QRect(30, 60, 67, 17))
        self.label_9.setObjectName("label_9")
        self.tbChieuCao = QtWidgets.QLineEdit(self.groupBox_2)
        self.tbChieuCao.setGeometry(QtCore.QRect(110, 90, 113, 25))
        self.tbChieuCao.setObjectName("tbChieuCao")
        self.label_20 = QtWidgets.QLabel(self.groupBox_2)
        self.label_20.setGeometry(QtCore.QRect(30, 120, 67, 17))
        self.label_20.setObjectName("label_20")
        self.tbGioiTinh = QtWidgets.QLineEdit(self.groupBox_2)
        self.tbGioiTinh.setGeometry(QtCore.QRect(110, 120, 113, 25))
        self.tbGioiTinh.setObjectName("tbGioiTinh")
        self.label_13 = QtWidgets.QLabel(self.groupBox_2)
        self.label_13.setGeometry(QtCore.QRect(30, 150, 81, 17))
        self.label_13.setObjectName("label_13")
        self.tbNhomMau = QtWidgets.QLineEdit(self.groupBox_2)
        self.tbNhomMau.setGeometry(QtCore.QRect(110, 150, 113, 25))
        self.tbNhomMau.setObjectName("tbNhomMau")
        self.TbDonThuoc = QtWidgets.QTextEdit(self.groupBox_2)
        self.TbDonThuoc.setGeometry(QtCore.QRect(30, 270, 211, 191))
        self.TbDonThuoc.setObjectName("TbDonThuoc")
        self.label_14 = QtWidgets.QLabel(self.groupBox_2)
        self.label_14.setGeometry(QtCore.QRect(30, 230, 81, 17))
        self.label_14.setObjectName("label_14")
        self.label_18 = QtWidgets.QLabel(self.groupBox_2)
        self.label_18.setGeometry(QtCore.QRect(230, 60, 31, 17))
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.groupBox_2)
        self.label_19.setGeometry(QtCore.QRect(230, 90, 31, 17))
        self.label_19.setObjectName("label_19")
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(639, 49, 281, 491))
        self.groupBox_3.setObjectName("groupBox_3")
        self.label_15 = QtWidgets.QLabel(self.groupBox_3)
        self.label_15.setGeometry(QtCore.QRect(20, 30, 67, 17))
        self.label_15.setObjectName("label_15")
        self.tbDiUng = QtWidgets.QTextEdit(self.groupBox_3)
        self.tbDiUng.setGeometry(QtCore.QRect(20, 60, 241, 191))
        self.tbDiUng.setObjectName("tbDiUng")
        self.tbChiTietBenh = QtWidgets.QTextEdit(self.groupBox_3)
        self.tbChiTietBenh.setGeometry(QtCore.QRect(20, 290, 241, 191))
        self.tbChiTietBenh.setObjectName("tbChiTietBenh")
        self.label_17 = QtWidgets.QLabel(self.groupBox_3)
        self.label_17.setGeometry(QtCore.QRect(20, 260, 101, 17))
        self.label_17.setObjectName("label_17")
        self.btQuayLai = QtWidgets.QPushButton(self.centralwidget)
        self.btQuayLai.setGeometry(QtCore.QRect(20, 10, 89, 25))
        self.btQuayLai.setObjectName("btQuayLai")
        self.btThemBenhNhan = QtWidgets.QPushButton(self.centralwidget)
        self.btThemBenhNhan.setGeometry(QtCore.QRect(770, 10, 151, 25))
        self.btThemBenhNhan.setObjectName("btThemBenhNhan")
        self.tbStatus = QtWidgets.QTextBrowser(self.centralwidget)
        self.tbStatus.setGeometry(QtCore.QRect(20, 560, 901, 91))
        self.tbStatus.setObjectName("tbStatus")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 947, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        # Kết nối các nút với hàm xử lý sự kiện
        self.btThemBenhNhan.clicked.connect(self.themBenhNhan)
        self.btQuayLai.clicked.connect(self.quayLai)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Thêm bệnh nhân"))
        self.groupBox.setTitle(_translate("MainWindow", "Thông tin bệnh nhân"))
        self.label.setText(_translate("MainWindow", "Họ và tên "))
        self.label_2.setText(_translate("MainWindow", "ID"))
        self.label_3.setText(_translate("MainWindow", "Ngày sinh"))
        self.label_4.setText(_translate("MainWindow", "Địa chỉ"))
        self.label_5.setText(_translate("MainWindow", "Thông tin liên lạc"))
        self.label_6.setText(_translate("MainWindow", "Tiền sử bệnh"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Tổng quan"))
        self.label_7.setText(_translate("MainWindow", "Tuổi "))
        self.label_8.setText(_translate("MainWindow", "Chiều cao"))
        self.label_9.setText(_translate("MainWindow", "Cân nặng"))
        self.label_20.setText(_translate("MainWindow", "Giới tính"))
        self.label_13.setText(_translate("MainWindow", "Nhóm máu"))
        self.label_14.setText(_translate("MainWindow", "Đơn thuốc"))
        self.label_18.setText(_translate("MainWindow", "kg"))
        self.label_19.setText(_translate("MainWindow", "cm"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Chi tiết khám bệnh"))
        self.label_15.setText(_translate("MainWindow", "Dị ứng "))
        self.label_17.setText(_translate("MainWindow", "Chi tiết bệnh "))
        self.btQuayLai.setText(_translate("MainWindow", "Quay Lại"))
        self.btThemBenhNhan.setText(_translate("MainWindow", "Thêm bệnh nhân"))


    def setToken(self, token):
        """Lưu token để sử dụng trong API call"""
        self.token = token
    
    def setParentWindow(self, window):
        """Lưu cửa sổ cha để quay lại sau khi hoàn thành"""
        self.parent_window = window
    
    def ma_hoa_aes(self, du_lieu, khoa):
        """
        Mã hóa dữ liệu bằng AES-256 với khóa đã cho
        
        Args:
            du_lieu: Dữ liệu cần mã hóa (chuỗi, số, v.v.)
            khoa: Khóa AES dạng bytes
            
        Returns:
            str: Dữ liệu đã mã hóa dạng base64
        """
        # Chuyển đổi dữ liệu đầu vào thành chuỗi nếu là số
        if isinstance(du_lieu, (int, float)):
            du_lieu = str(du_lieu)
            
        # Tạo IV ngẫu nhiên 16 byte
        iv = secrets.token_bytes(16)
        
        # Mã hóa dữ liệu
        cipher = AES.new(khoa, AES.MODE_CBC, iv)
        du_lieu_bytes = du_lieu.encode('utf-8')
        du_lieu_da_ma_hoa = cipher.encrypt(pad(du_lieu_bytes, AES.block_size))
        
        # Kết hợp IV và dữ liệu đã mã hóa
        du_lieu_hoan_chinh = iv + du_lieu_da_ma_hoa
        
        # Chuyển đổi sang base64 để dễ truyền
        du_lieu_base64 = base64.b64encode(du_lieu_hoan_chinh).decode('utf-8')
        
        return du_lieu_base64
    
    def quayLai(self):
        """Quay lại trang Home"""
        if self.parent_window:
            MainWindow = self.centralwidget.window()
            MainWindow.close()
            self.parent_window.show()
    
    def themBenhNhan(self):
        """Thêm bệnh nhân mới"""
        try:
            # Kiểm tra token
            if not self.token:
                self.tbStatus.setText("Lỗi: Không có token xác thực. Vui lòng đăng nhập lại.")
                return
            
            # Lấy dữ liệu từ các ô nhập
            id_benh_nhan = self.tbID.text().strip()
            ho_ten = self.tbHoTen.text().strip()
            ngay_sinh = self.tbNgaySinh.text().strip()
            dia_chi = self.tbDiaChi.toPlainText().strip()
            thong_tin_lien_lac = self.tbThongTinLienLac.toPlainText().strip()
            tien_su_benh = self.tbTienSuBenh.toPlainText().strip()
            
            # Chuyển đổi tuổi, cân nặng, chiều cao sang số nếu có
            tuoi_text = self.tbTuoi.text().strip()
            if tuoi_text:
                try:
                    tuoi = int(tuoi_text)
                    if tuoi <= 0:
                        self.tbStatus.setText("Lỗi: Tuổi phải là số nguyên dương")
                        return
                except ValueError:
                    self.tbStatus.setText("Lỗi: Tuổi phải là số nguyên")
                    return
            else:
                self.tbStatus.setText("Vui lòng nhập tuổi")
                return
                
            can_nang_text = self.tbCanNang.text().strip()
            if can_nang_text:
                try:
                    can_nang = float(can_nang_text)
                    if can_nang <= 0:
                        self.tbStatus.setText("Lỗi: Cân nặng phải là số dương")
                        return
                except ValueError:
                    self.tbStatus.setText("Lỗi: Cân nặng phải là số")
                    return
            else:
                self.tbStatus.setText("Vui lòng nhập cân nặng")
                return
                
            chieu_cao_text = self.tbChieuCao.text().strip()
            if chieu_cao_text:
                try:
                    chieu_cao = float(chieu_cao_text)
                    if chieu_cao <= 0:
                        self.tbStatus.setText("Lỗi: Chiều cao phải là số dương")
                        return
                except ValueError:
                    self.tbStatus.setText("Lỗi: Chiều cao phải là số")
                    return
            else:
                self.tbStatus.setText("Vui lòng nhập chiều cao")
                return
            
            nhom_mau = self.tbNhomMau.text().strip()
            gioi_tinh = self.tbGioiTinh.text().strip()
            don_thuoc = self.TbDonThuoc.toPlainText().strip()
            di_ung = self.tbDiUng.toPlainText().strip()
            chi_tiet_benh = self.tbChiTietBenh.toPlainText().strip()
            
            # Kiểm tra các trường bắt buộc
            if not id_benh_nhan:
                self.tbStatus.setText("Lỗi: Vui lòng nhập ID bệnh nhân")
                return
                
            if not ho_ten:
                self.tbStatus.setText("Lỗi: Vui lòng nhập họ tên bệnh nhân")
                return
            
            # Mã hóa dữ liệu bằng AES-256
            
            # Tạo random seed để làm đầu vào cho SHA3
            random_seed = secrets.token_hex(16)
            
            # Tạo khóa AES từ SHA3-256
            sha3 = hashlib.sha3_256(random_seed.encode())
            khoa_aes = sha3.digest()  # Lấy binary digest làm khóa AES
            khoa_aes_hex = sha3.hexdigest()  # Lưu hex digest để gửi đi
            
            # Mã hóa từng trường dữ liệu với cùng một khóa AES
            ngay_sinh = self.ma_hoa_aes(ngay_sinh, khoa_aes)
            dia_chi = self.ma_hoa_aes(dia_chi, khoa_aes)
            thong_tin_lien_lac = self.ma_hoa_aes(thong_tin_lien_lac, khoa_aes)
            tien_su_benh = self.ma_hoa_aes(tien_su_benh, khoa_aes)
            tuoi = self.ma_hoa_aes(tuoi, khoa_aes)
            can_nang = self.ma_hoa_aes(can_nang, khoa_aes)
            chieu_cao = self.ma_hoa_aes(chieu_cao, khoa_aes)
            nhom_mau = self.ma_hoa_aes(nhom_mau, khoa_aes)
            don_thuoc = self.ma_hoa_aes(don_thuoc, khoa_aes)
            di_ung = self.ma_hoa_aes(di_ung, khoa_aes)
            chi_tiet_benh = self.ma_hoa_aes(chi_tiet_benh, khoa_aes)
            gioi_tinh = self.ma_hoa_aes(gioi_tinh if gioi_tinh else "Không xác định", khoa_aes)

            # Tạo đối tượng dữ liệu bệnh nhân
            patient_data = {
                "ID_BenhNhan": id_benh_nhan,
                "HoTen": ho_ten,
                "NgaySinh": ngay_sinh,
                "DiaChi": dia_chi,
                "ThongTinLienLac": thong_tin_lien_lac,
                "TienSuBenh": tien_su_benh,
                "Tuoi": tuoi,
                "CanNang": can_nang,
                "ChieuCao": chieu_cao,
                "NhomMau": nhom_mau,
                "DonThuoc": don_thuoc,
                "DiUng": di_ung,
                "ChiTietBenh": chi_tiet_benh,
                "GioiTinh": gioi_tinh,
                "KhoaAES": khoa_aes_hex
            }
            
            # Gửi dữ liệu đến API
            base_url = "http://localhost:5000/api"
            headers = {"Authorization": f"Bearer {self.token}"}
            
            response = requests.post(
                f"{base_url}/patients", 
                headers=headers,
                json=patient_data
            )
            
            # Xử lý phản hồi
            if response.status_code == 201:
                self.tbStatus.setText(f"Đã thêm bệnh nhân '{ho_ten}' thành công!")
                self.xoaFormNhapLieu()
            else:
                error_message = response.json().get('message', 'Lỗi không xác định')
                self.tbStatus.setText(f"Lỗi: {error_message}")
        
        except Exception as e:
            self.tbStatus.setText(f"Lỗi: {str(e)}")
    
    def xoaFormNhapLieu(self):
        """Xóa dữ liệu đã nhập trong form"""
        self.tbID.clear()
        self.tbHoTen.clear()
        self.tbNgaySinh.clear()
        self.tbDiaChi.clear()
        self.tbThongTinLienLac.clear()
        self.tbTienSuBenh.clear()
        self.tbTuoi.clear()
        self.tbCanNang.clear()
        self.tbChieuCao.clear()
        self.tbGioiTinh.clear()
        self.tbNhomMau.clear()
        self.TbDonThuoc.clear()
        self.tbDiUng.clear()
        self.tbChiTietBenh.clear()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
