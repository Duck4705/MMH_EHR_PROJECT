# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Home.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import requests
import base64
import hashlib
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad


class Ui_mainWindow(object):
    def __init__(self):
        self.token = None
        self.user_info = None

    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(703, 600)
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 80, 681, 471))
        self.groupBox.setObjectName("groupBox")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(10, 50, 221, 17))
        self.label.setObjectName("label")
        self.tbIDBenhNhan = QtWidgets.QLineEdit(self.groupBox)
        self.tbIDBenhNhan.setGeometry(QtCore.QRect(240, 50, 113, 25))
        self.tbIDBenhNhan.setObjectName("tbIDBenhNhan")
        self.btXemThongTinBenhNhan = QtWidgets.QPushButton(self.groupBox)
        self.btXemThongTinBenhNhan.setGeometry(QtCore.QRect(390, 50, 251, 25))
        self.btXemThongTinBenhNhan.setObjectName("btXemThongTinBenhNhan")
        self.tbHienThiDanhSachBenhNhan = QtWidgets.QTextBrowser(self.groupBox)
        self.tbHienThiDanhSachBenhNhan.setGeometry(QtCore.QRect(50, 190, 301, 261))
        self.tbHienThiDanhSachBenhNhan.setObjectName("tbHienThiDanhSachBenhNhan")
        self.btLayDanhSachBenhNhan = QtWidgets.QPushButton(self.groupBox)
        self.btLayDanhSachBenhNhan.setGeometry(QtCore.QRect(380, 190, 241, 25))
        self.btLayDanhSachBenhNhan.setObjectName("btLayDanhSachBenhNhan")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(50, 150, 301, 17))
        self.label_2.setObjectName("label_2")
        self.btDangXuat = QtWidgets.QPushButton(self.centralwidget)
        self.btDangXuat.setGeometry(QtCore.QRect(600, 10, 89, 25))
        self.btDangXuat.setObjectName("btDangXuat")
        self.btThemEHR = QtWidgets.QPushButton(self.centralwidget)
        self.btThemEHR.setGeometry(QtCore.QRect(490, 10, 89, 25))
        self.btThemEHR.setObjectName("btThemEHR")
        mainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(mainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 703, 22))
        self.menubar.setObjectName("menubar")
        mainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(mainWindow)
        self.statusbar.setObjectName("statusbar")
        mainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)
        
        # Kết nối các nút với hàm xử lý tương ứng
        self.btThemEHR.clicked.connect(self.openAddPatient)
        self.btLayDanhSachBenhNhan.clicked.connect(self.getPatientsList)
        self.btXemThongTinBenhNhan.clicked.connect(self.getPatientDetail)
        self.btDangXuat.clicked.connect(self.logout)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "Tra cứu hồ sơ bệnh nhân"))
        self.groupBox.setTitle(_translate("mainWindow", "Tra cứu"))
        self.label.setText(_translate("mainWindow", "Nhập ID bệnh nhân cần tra cứu"))
        self.btXemThongTinBenhNhan.setText(_translate("mainWindow", "Xem thông tin chi tiết bệnh nhân"))
        self.btLayDanhSachBenhNhan.setText(_translate("mainWindow", "Lấy danh sách bệnh nhân có hồ sơ"))
        self.label_2.setText(_translate("mainWindow", "Hiển thị các bệnh nhân có hồ sơ y tế điện tử"))
        self.btDangXuat.setText(_translate("mainWindow", "Đăng Xuất"))
        self.btThemEHR.setText(_translate("mainWindow", "Thêm EHR "))


    def giai_ma_aes(self, du_lieu_ma_hoa, khoa_hex):
        """
        Giải mã dữ liệu được mã hóa bằng AES
        
        Args:
            du_lieu_ma_hoa (str): Dữ liệu đã mã hóa dạng base64
            khoa_hex (str): Khóa AES dạng chuỗi hex
            
        Returns:
            str: Dữ liệu đã giải mã
        """
        try:
            # Kiểm tra dữ liệu đầu vào
            if not du_lieu_ma_hoa or not isinstance(du_lieu_ma_hoa, str):
                return "N/A"
                
            # Chuyển khóa từ hex sang bytes
            khoa = bytes.fromhex(khoa_hex)
            
            # Giải mã Base64
            du_lieu_ma_hoa_bytes = base64.b64decode(du_lieu_ma_hoa)
            
            # Kiểm tra độ dài dữ liệu
            if len(du_lieu_ma_hoa_bytes) < 16:  # IV là 16 bytes
                return "<Dữ liệu mã hóa không hợp lệ>"
                
            # Tách IV (16 byte đầu tiên)
            iv = du_lieu_ma_hoa_bytes[:16]
            du_lieu_ma_hoa_bytes = du_lieu_ma_hoa_bytes[16:]
            
            # Giải mã AES
            cipher = AES.new(khoa, AES.MODE_CBC, iv)
            du_lieu_giai_ma = unpad(cipher.decrypt(du_lieu_ma_hoa_bytes), AES.block_size)
            
            # Chuyển kết quả về chuỗi
            return du_lieu_giai_ma.decode('utf-8')
        except ValueError as e:
            # Lỗi cụ thể khi unpad không thành công
            return "<Lỗi giải mã: Dữ liệu không đúng định dạng>"
        except Exception as e:
            # Các lỗi khác
            return f"<Lỗi giải mã: {str(e)}>"
    
    def openAddPatient(self):
        """Mở trang thêm bệnh nhân mới"""
        try:
            # Import trang AddPatient
            from AddPatient import Ui_MainWindow
            
            # Lưu lại MainWindow hiện tại để đóng sau khi mở AddPatient
            self.add_patient_window = QtWidgets.QMainWindow()
            self.add_patient_ui = Ui_MainWindow()
            self.add_patient_ui.setupUi(self.add_patient_window)
            
            # Truyền token cho trang AddPatient
            if hasattr(self, 'token'):
                self.add_patient_ui.setToken(self.token)
            
            # Lưu cửa sổ cha để quay lại sau khi hoàn thành
            main_window = self.centralwidget.window()
            self.add_patient_ui.setParentWindow(main_window)
            
            # Hiển thị trang AddPatient
            self.add_patient_window.show()
            
            # Ẩn cửa sổ Home
            main_window.hide()
            
        except Exception as e:
            print(f"Lỗi khi mở trang thêm bệnh nhân: {str(e)}")

    def getPatientsList(self):
        """Lấy danh sách bệnh nhân từ API"""
        try:
            if hasattr(self, 'token'):
                # Gọi API với token xác thực
                base_url = "http://localhost:5000/api"
                headers = {"Authorization": f"Bearer {self.token}"}
                
                response = requests.get(f"{base_url}/patients", headers=headers)
                
                if response.status_code == 200:
                    patients = response.json()
                    # Hiển thị danh sách bệnh nhân
                    patient_list_text = "DANH SÁCH BỆNH NHÂN:\n\n"
                    
                    if not patients:
                        patient_list_text += "Không có bệnh nhân nào trong hệ thống."
                    else:
                        for i, patient in enumerate(patients, 1):
                            patient_id = patient.get('ID_BenhNhan', 'N/A')
                            name = patient.get('HoTen', 'N/A')
                            gender = patient.get('GioiTinh', 'N/A') 
                            age = patient.get('Tuoi', 'N/A')
                            patient_list_text += f"{i}. ID: {patient_id} - Họ tên: {name} - Giới tính: {gender} - Tuổi: {age}\n"
                    
                    # Thêm thông báo xác nhận token đã được sử dụng thành công
                    patient_list_text += f"\n(Đã truy xuất dữ liệu thành công với token!)"
                    
                    self.tbHienThiDanhSachBenhNhan.setText(patient_list_text)
                else:
                    error_message = response.json().get('message', 'Lỗi không xác định')
                    self.tbHienThiDanhSachBenhNhan.setText(f"Lỗi khi lấy danh sách bệnh nhân: {error_message}\nToken không hợp lệ hoặc đã hết hạn.")
            else:
                self.tbHienThiDanhSachBenhNhan.setText("Lỗi xác thực: Không có token. Vui lòng đăng nhập lại để nhận token mới.")
                
        except Exception as e:
            self.tbHienThiDanhSachBenhNhan.setText(f"Lỗi khi lấy danh sách bệnh nhân: {str(e)}")
    
    def getPatientDetail(self):
        """Lấy thông tin chi tiết bệnh nhân từ API"""
        try:
            if hasattr(self, 'token'):
                # Lấy ID bệnh nhân từ trường nhập liệu
                patient_id = self.tbIDBenhNhan.text().strip()
                
                if not patient_id:
                    self.tbHienThiDanhSachBenhNhan.setText("Vui lòng nhập ID bệnh nhân!")
                    return
                
                # Gọi API với token xác thực
                base_url = "http://localhost:5000/api"
                headers = {"Authorization": f"Bearer {self.token}"}
                
                response = requests.get(f"{base_url}/patients/{patient_id}", headers=headers)
                
                if response.status_code == 200:
                    patient_data = response.json()
                    
                    # Lấy khóa AES để giải mã
                    khoa_aes = patient_data.get('KhoaAES')
                    
                    # Giải mã các trường được mã hóa nếu có khóa AES
                    co_loi_giai_ma = False  # Cờ để kiểm tra lỗi giải mã
                    
                    if khoa_aes:
                        try:
                            # Giải mã các trường dữ liệu
                            gioi_tinh = self.giai_ma_aes(patient_data.get('GioiTinh', ''), khoa_aes)
                            ngay_sinh = self.giai_ma_aes(patient_data.get('NgaySinh', ''), khoa_aes)
                            tuoi = self.giai_ma_aes(patient_data.get('Tuoi', ''), khoa_aes)
                            dia_chi = self.giai_ma_aes(patient_data.get('DiaChi', ''), khoa_aes)
                            thong_tin_lien_lac = self.giai_ma_aes(patient_data.get('ThongTinLienLac', ''), khoa_aes)
                            can_nang = self.giai_ma_aes(patient_data.get('CanNang', ''), khoa_aes)
                            chieu_cao = self.giai_ma_aes(patient_data.get('ChieuCao', ''), khoa_aes)
                            nhom_mau = self.giai_ma_aes(patient_data.get('NhomMau', ''), khoa_aes)
                            tien_su_benh = self.giai_ma_aes(patient_data.get('TienSuBenh', ''), khoa_aes)
                            di_ung = self.giai_ma_aes(patient_data.get('DiUng', ''), khoa_aes)
                            chi_tiet_benh = self.giai_ma_aes(patient_data.get('ChiTietBenh', ''), khoa_aes)
                            don_thuoc = self.giai_ma_aes(patient_data.get('DonThuoc', ''), khoa_aes)
                            
                            # Kiểm tra xem có lỗi giải mã không
                            for field in [gioi_tinh, ngay_sinh, tuoi, dia_chi, thong_tin_lien_lac, 
                                         can_nang, chieu_cao, nhom_mau, tien_su_benh, di_ung, 
                                         chi_tiet_benh, don_thuoc]:
                                if field and field.startswith("<Lỗi giải mã"):
                                    co_loi_giai_ma = True
                                    break
                        except Exception:
                            co_loi_giai_ma = True
                    else:
                        # Nếu không có khóa, sử dụng giá trị hiện tại (có thể đã được lưu dưới dạng không mã hóa)
                        gioi_tinh = patient_data.get('GioiTinh', 'N/A')
                        ngay_sinh = patient_data.get('NgaySinh', 'N/A')
                        tuoi = patient_data.get('Tuoi', 'N/A')
                        dia_chi = patient_data.get('DiaChi', 'N/A')
                        thong_tin_lien_lac = patient_data.get('ThongTinLienLac', 'N/A')
                        can_nang = patient_data.get('CanNang', 'N/A')
                        chieu_cao = patient_data.get('ChieuCao', 'N/A')
                        nhom_mau = patient_data.get('NhomMau', 'N/A')
                        tien_su_benh = patient_data.get('TienSuBenh', 'N/A')
                        di_ung = patient_data.get('DiUng', 'N/A')
                        chi_tiet_benh = patient_data.get('ChiTietBenh', 'N/A')
                        don_thuoc = patient_data.get('DonThuoc', 'N/A')
                    
                    # Hiển thị thông tin chi tiết bệnh nhân theo schema với dữ liệu đã giải mã
                    patient_detail = f"THÔNG TIN CHI TIẾT BỆNH NHÂN:\n\n"
                    patient_detail += f"ID bệnh nhân: {patient_data.get('ID_BenhNhan', 'N/A')}\n"
                    patient_detail += f"Họ tên: {patient_data.get('HoTen', 'N/A')}\n"
                    patient_detail += f"Giới tính: {gioi_tinh}\n"
                    patient_detail += f"Ngày sinh: {ngay_sinh}\n"
                    patient_detail += f"Tuổi: {tuoi}\n"
                    patient_detail += f"Địa chỉ: {dia_chi}\n"
                    patient_detail += f"Thông tin liên lạc: {thong_tin_lien_lac}\n"
                    patient_detail += f"Cân nặng: {can_nang} kg\n"
                    patient_detail += f"Chiều cao: {chieu_cao} cm\n"
                    patient_detail += f"Nhóm máu: {nhom_mau}\n"
                    patient_detail += f"\nTIỀN SỬ Y KHOA:\n"
                    patient_detail += f"Tiền sử bệnh: {tien_su_benh}\n"
                    patient_detail += f"Dị ứng: {di_ung}\n"
                    patient_detail += f"\nCHI TIẾT BỆNH HIỆN TẠI:\n"
                    patient_detail += f"Chi tiết bệnh: {chi_tiet_benh}\n"
                    patient_detail += f"Đơn thuốc: {don_thuoc}\n"
                    patient_detail += f"\nLấy dữ liệu thành công với token xác thực!"
                    if khoa_aes:
                        if co_loi_giai_ma:
                            patient_detail += f"\n(Có lỗi xảy ra khi giải mã dữ liệu. Vui lòng liên hệ quản trị viên.)"
                        else:
                            patient_detail += f"\n(Dữ liệu đã được giải mã thành công)"
                    
                    self.tbHienThiDanhSachBenhNhan.setText(patient_detail)
                else:
                    error_message = response.json().get('message', 'Lỗi không xác định')
                    self.tbHienThiDanhSachBenhNhan.setText(f"Lỗi khi lấy thông tin bệnh nhân: {error_message}\nToken không hợp lệ hoặc đã hết hạn.")
            else:
                self.tbHienThiDanhSachBenhNhan.setText("Lỗi xác thực: Không có token. Vui lòng đăng nhập lại để nhận token mới.")
                
        except Exception as e:
            self.tbHienThiDanhSachBenhNhan.setText(f"Lỗi khi lấy thông tin bệnh nhân: {str(e)}")

    def logout(self):
        """Đăng xuất, vô hiệu hóa token và quay lại màn hình đăng nhập"""
        try:
            # Gửi token hiện tại đến API để đưa vào blacklist (vô hiệu hóa)
            if hasattr(self, 'token') and self.token:
                base_url = "http://localhost:5000/api"
                headers = {"Authorization": f"Bearer {self.token}"}
                
                # Gọi API đăng xuất để đưa token vào blacklist
                response = requests.post(f"{base_url}/users/logout", headers=headers)
                
                if response.status_code == 200:
                    self.tbHienThiDanhSachBenhNhan.setText("Đăng xuất thành công. Token đã bị vô hiệu hóa.")
                    # Reset token và thông tin người dùng
                    self.token = None
                    self.user_info = None
                else:
                    self.tbHienThiDanhSachBenhNhan.setText(f"Lỗi khi đăng xuất: {response.json().get('message', 'Lỗi không xác định')}")
            
            # Tìm tham chiếu đến cửa sổ login
            main_window = self.centralwidget.window()
            
            # Đóng cửa sổ hiện tại và hiển thị cửa sổ đăng nhập
            # Phải có một tham chiếu tới cửa sổ đăng nhập từ bên ngoài
            if hasattr(main_window, 'parent_login_window'):
                login_window = main_window.parent_login_window
                main_window.close()
                login_window.show()
            else:
                # Nếu không có tham chiếu, chỉ hiển thị thông báo
                self.tbHienThiDanhSachBenhNhan.setText("Đã đăng xuất, nhưng không thể quay lại trang đăng nhập. Vui lòng đóng ứng dụng và đăng nhập lại.")
        except Exception as e:
            self.tbHienThiDanhSachBenhNhan.setText(f"Lỗi khi đăng xuất: {str(e)}")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_mainWindow()
    ui.setupUi(mainWindow)
    mainWindow.show()
    sys.exit(app.exec_())
